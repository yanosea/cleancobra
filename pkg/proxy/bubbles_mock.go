// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/bubbles.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/bubbles.go -destination=./pkg/proxy/bubbles_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	tea "github.com/charmbracelet/bubbletea"
	gomock "go.uber.org/mock/gomock"
)

// MockBubbles is a mock of Bubbles interface.
type MockBubbles struct {
	ctrl     *gomock.Controller
	recorder *MockBubblesMockRecorder
	isgomock struct{}
}

// MockBubblesMockRecorder is the mock recorder for MockBubbles.
type MockBubblesMockRecorder struct {
	mock *MockBubbles
}

// NewMockBubbles creates a new mock instance.
func NewMockBubbles(ctrl *gomock.Controller) *MockBubbles {
	mock := &MockBubbles{ctrl: ctrl}
	mock.recorder = &MockBubblesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBubbles) EXPECT() *MockBubblesMockRecorder {
	return m.recorder
}

// NewTextInput mocks base method.
func (m *MockBubbles) NewTextInput() TextInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTextInput")
	ret0, _ := ret[0].(TextInput)
	return ret0
}

// NewTextInput indicates an expected call of NewTextInput.
func (mr *MockBubblesMockRecorder) NewTextInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTextInput", reflect.TypeOf((*MockBubbles)(nil).NewTextInput))
}

// MockTextInput is a mock of TextInput interface.
type MockTextInput struct {
	ctrl     *gomock.Controller
	recorder *MockTextInputMockRecorder
	isgomock struct{}
}

// MockTextInputMockRecorder is the mock recorder for MockTextInput.
type MockTextInputMockRecorder struct {
	mock *MockTextInput
}

// NewMockTextInput creates a new mock instance.
func NewMockTextInput(ctrl *gomock.Controller) *MockTextInput {
	mock := &MockTextInput{ctrl: ctrl}
	mock.recorder = &MockTextInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTextInput) EXPECT() *MockTextInputMockRecorder {
	return m.recorder
}

// Blur mocks base method.
func (m *MockTextInput) Blur() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Blur")
}

// Blur indicates an expected call of Blur.
func (mr *MockTextInputMockRecorder) Blur() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blur", reflect.TypeOf((*MockTextInput)(nil).Blur))
}

// CharLimit mocks base method.
func (m *MockTextInput) CharLimit() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CharLimit")
	ret0, _ := ret[0].(int)
	return ret0
}

// CharLimit indicates an expected call of CharLimit.
func (mr *MockTextInputMockRecorder) CharLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CharLimit", reflect.TypeOf((*MockTextInput)(nil).CharLimit))
}

// Focus mocks base method.
func (m *MockTextInput) Focus() tea.Cmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Focus")
	ret0, _ := ret[0].(tea.Cmd)
	return ret0
}

// Focus indicates an expected call of Focus.
func (mr *MockTextInputMockRecorder) Focus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Focus", reflect.TypeOf((*MockTextInput)(nil).Focus))
}

// Focused mocks base method.
func (m *MockTextInput) Focused() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Focused")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Focused indicates an expected call of Focused.
func (mr *MockTextInputMockRecorder) Focused() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Focused", reflect.TypeOf((*MockTextInput)(nil).Focused))
}

// Placeholder mocks base method.
func (m *MockTextInput) Placeholder() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Placeholder")
	ret0, _ := ret[0].(string)
	return ret0
}

// Placeholder indicates an expected call of Placeholder.
func (mr *MockTextInputMockRecorder) Placeholder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Placeholder", reflect.TypeOf((*MockTextInput)(nil).Placeholder))
}

// Prompt mocks base method.
func (m *MockTextInput) Prompt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prompt")
	ret0, _ := ret[0].(string)
	return ret0
}

// Prompt indicates an expected call of Prompt.
func (mr *MockTextInputMockRecorder) Prompt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockTextInput)(nil).Prompt))
}

// SetCharLimit mocks base method.
func (m *MockTextInput) SetCharLimit(limit int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCharLimit", limit)
}

// SetCharLimit indicates an expected call of SetCharLimit.
func (mr *MockTextInputMockRecorder) SetCharLimit(limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharLimit", reflect.TypeOf((*MockTextInput)(nil).SetCharLimit), limit)
}

// SetPlaceholder mocks base method.
func (m *MockTextInput) SetPlaceholder(str string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlaceholder", str)
}

// SetPlaceholder indicates an expected call of SetPlaceholder.
func (mr *MockTextInputMockRecorder) SetPlaceholder(str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlaceholder", reflect.TypeOf((*MockTextInput)(nil).SetPlaceholder), str)
}

// SetPrompt mocks base method.
func (m *MockTextInput) SetPrompt(str string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrompt", str)
}

// SetPrompt indicates an expected call of SetPrompt.
func (mr *MockTextInputMockRecorder) SetPrompt(str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrompt", reflect.TypeOf((*MockTextInput)(nil).SetPrompt), str)
}

// SetValue mocks base method.
func (m *MockTextInput) SetValue(s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetValue", s)
}

// SetValue indicates an expected call of SetValue.
func (mr *MockTextInputMockRecorder) SetValue(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockTextInput)(nil).SetValue), s)
}

// SetWidth mocks base method.
func (m *MockTextInput) SetWidth(w int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWidth", w)
}

// SetWidth indicates an expected call of SetWidth.
func (mr *MockTextInputMockRecorder) SetWidth(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWidth", reflect.TypeOf((*MockTextInput)(nil).SetWidth), w)
}

// Update mocks base method.
func (m *MockTextInput) Update(msg tea.Msg) (TextInput, tea.Cmd) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", msg)
	ret0, _ := ret[0].(TextInput)
	ret1, _ := ret[1].(tea.Cmd)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTextInputMockRecorder) Update(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTextInput)(nil).Update), msg)
}

// Value mocks base method.
func (m *MockTextInput) Value() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(string)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockTextInputMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockTextInput)(nil).Value))
}

// View mocks base method.
func (m *MockTextInput) View() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View")
	ret0, _ := ret[0].(string)
	return ret0
}

// View indicates an expected call of View.
func (mr *MockTextInputMockRecorder) View() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockTextInput)(nil).View))
}

// Width mocks base method.
func (m *MockTextInput) Width() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Width")
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width.
func (mr *MockTextInputMockRecorder) Width() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockTextInput)(nil).Width))
}
