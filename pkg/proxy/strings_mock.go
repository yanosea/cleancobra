// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/strings.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/strings.go -destination=./pkg/proxy/strings_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStrings is a mock of Strings interface.
type MockStrings struct {
	ctrl     *gomock.Controller
	recorder *MockStringsMockRecorder
	isgomock struct{}
}

// MockStringsMockRecorder is the mock recorder for MockStrings.
type MockStringsMockRecorder struct {
	mock *MockStrings
}

// NewMockStrings creates a new mock instance.
func NewMockStrings(ctrl *gomock.Controller) *MockStrings {
	mock := &MockStrings{ctrl: ctrl}
	mock.recorder = &MockStringsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrings) EXPECT() *MockStringsMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockStrings) Contains(s, substr string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", s, substr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockStringsMockRecorder) Contains(s, substr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockStrings)(nil).Contains), s, substr)
}

// HasPrefix mocks base method.
func (m *MockStrings) HasPrefix(s, prefix string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPrefix", s, prefix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPrefix indicates an expected call of HasPrefix.
func (mr *MockStringsMockRecorder) HasPrefix(s, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPrefix", reflect.TypeOf((*MockStrings)(nil).HasPrefix), s, prefix)
}

// HasSuffix mocks base method.
func (m *MockStrings) HasSuffix(s, suffix string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSuffix", s, suffix)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasSuffix indicates an expected call of HasSuffix.
func (mr *MockStringsMockRecorder) HasSuffix(s, suffix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSuffix", reflect.TypeOf((*MockStrings)(nil).HasSuffix), s, suffix)
}

// Join mocks base method.
func (m *MockStrings) Join(elems []string, sep string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", elems, sep)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockStringsMockRecorder) Join(elems, sep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockStrings)(nil).Join), elems, sep)
}

// Repeat mocks base method.
func (m *MockStrings) Repeat(s string, count int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repeat", s, count)
	ret0, _ := ret[0].(string)
	return ret0
}

// Repeat indicates an expected call of Repeat.
func (mr *MockStringsMockRecorder) Repeat(s, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repeat", reflect.TypeOf((*MockStrings)(nil).Repeat), s, count)
}

// Replace mocks base method.
func (m *MockStrings) Replace(s, old, new string, n int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", s, old, new, n)
	ret0, _ := ret[0].(string)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockStringsMockRecorder) Replace(s, old, new, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockStrings)(nil).Replace), s, old, new, n)
}

// ReplaceAll mocks base method.
func (m *MockStrings) ReplaceAll(s, old, new string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceAll", s, old, new)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReplaceAll indicates an expected call of ReplaceAll.
func (mr *MockStringsMockRecorder) ReplaceAll(s, old, new any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceAll", reflect.TypeOf((*MockStrings)(nil).ReplaceAll), s, old, new)
}

// Split mocks base method.
func (m *MockStrings) Split(s, sep string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Split", s, sep)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Split indicates an expected call of Split.
func (mr *MockStringsMockRecorder) Split(s, sep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Split", reflect.TypeOf((*MockStrings)(nil).Split), s, sep)
}

// ToLower mocks base method.
func (m *MockStrings) ToLower(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToLower", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToLower indicates an expected call of ToLower.
func (mr *MockStringsMockRecorder) ToLower(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToLower", reflect.TypeOf((*MockStrings)(nil).ToLower), s)
}

// ToUpper mocks base method.
func (m *MockStrings) ToUpper(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToUpper", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToUpper indicates an expected call of ToUpper.
func (mr *MockStringsMockRecorder) ToUpper(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToUpper", reflect.TypeOf((*MockStrings)(nil).ToUpper), s)
}

// TrimSpace mocks base method.
func (m *MockStrings) TrimSpace(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrimSpace", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// TrimSpace indicates an expected call of TrimSpace.
func (mr *MockStringsMockRecorder) TrimSpace(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimSpace", reflect.TypeOf((*MockStrings)(nil).TrimSpace), s)
}
