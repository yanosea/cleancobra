// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/json.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/json.go -destination=./pkg/proxy/json_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJSON is a mock of JSON interface.
type MockJSON struct {
	ctrl     *gomock.Controller
	recorder *MockJSONMockRecorder
	isgomock struct{}
}

// MockJSONMockRecorder is the mock recorder for MockJSON.
type MockJSONMockRecorder struct {
	mock *MockJSON
}

// NewMockJSON creates a new mock instance.
func NewMockJSON(ctrl *gomock.Controller) *MockJSON {
	mock := &MockJSON{ctrl: ctrl}
	mock.recorder = &MockJSONMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSON) EXPECT() *MockJSONMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockJSON) Marshal(v any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockJSONMockRecorder) Marshal(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockJSON)(nil).Marshal), v)
}

// NewDecoder mocks base method.
func (m *MockJSON) NewDecoder(r io.Reader) JSONDecoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDecoder", r)
	ret0, _ := ret[0].(JSONDecoder)
	return ret0
}

// NewDecoder indicates an expected call of NewDecoder.
func (mr *MockJSONMockRecorder) NewDecoder(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDecoder", reflect.TypeOf((*MockJSON)(nil).NewDecoder), r)
}

// NewEncoder mocks base method.
func (m *MockJSON) NewEncoder(w io.Writer) JSONEncoder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEncoder", w)
	ret0, _ := ret[0].(JSONEncoder)
	return ret0
}

// NewEncoder indicates an expected call of NewEncoder.
func (mr *MockJSONMockRecorder) NewEncoder(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEncoder", reflect.TypeOf((*MockJSON)(nil).NewEncoder), w)
}

// Unmarshal mocks base method.
func (m *MockJSON) Unmarshal(data []byte, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockJSONMockRecorder) Unmarshal(data, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockJSON)(nil).Unmarshal), data, v)
}

// MockJSONEncoder is a mock of JSONEncoder interface.
type MockJSONEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockJSONEncoderMockRecorder
	isgomock struct{}
}

// MockJSONEncoderMockRecorder is the mock recorder for MockJSONEncoder.
type MockJSONEncoderMockRecorder struct {
	mock *MockJSONEncoder
}

// NewMockJSONEncoder creates a new mock instance.
func NewMockJSONEncoder(ctrl *gomock.Controller) *MockJSONEncoder {
	mock := &MockJSONEncoder{ctrl: ctrl}
	mock.recorder = &MockJSONEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONEncoder) EXPECT() *MockJSONEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockJSONEncoder) Encode(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockJSONEncoderMockRecorder) Encode(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockJSONEncoder)(nil).Encode), v)
}

// SetIndent mocks base method.
func (m *MockJSONEncoder) SetIndent(prefix, indent string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIndent", prefix, indent)
}

// SetIndent indicates an expected call of SetIndent.
func (mr *MockJSONEncoderMockRecorder) SetIndent(prefix, indent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIndent", reflect.TypeOf((*MockJSONEncoder)(nil).SetIndent), prefix, indent)
}

// MockJSONDecoder is a mock of JSONDecoder interface.
type MockJSONDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockJSONDecoderMockRecorder
	isgomock struct{}
}

// MockJSONDecoderMockRecorder is the mock recorder for MockJSONDecoder.
type MockJSONDecoderMockRecorder struct {
	mock *MockJSONDecoder
}

// NewMockJSONDecoder creates a new mock instance.
func NewMockJSONDecoder(ctrl *gomock.Controller) *MockJSONDecoder {
	mock := &MockJSONDecoder{ctrl: ctrl}
	mock.recorder = &MockJSONDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONDecoder) EXPECT() *MockJSONDecoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockJSONDecoder) Decode(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockJSONDecoderMockRecorder) Decode(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockJSONDecoder)(nil).Decode), v)
}
