// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/errors.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/errors.go -destination=./pkg/proxy/errors_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockErrors is a mock of Errors interface.
type MockErrors struct {
	ctrl     *gomock.Controller
	recorder *MockErrorsMockRecorder
	isgomock struct{}
}

// MockErrorsMockRecorder is the mock recorder for MockErrors.
type MockErrorsMockRecorder struct {
	mock *MockErrors
}

// NewMockErrors creates a new mock instance.
func NewMockErrors(ctrl *gomock.Controller) *MockErrors {
	mock := &MockErrors{ctrl: ctrl}
	mock.recorder = &MockErrorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrors) EXPECT() *MockErrorsMockRecorder {
	return m.recorder
}

// As mocks base method.
func (m *MockErrors) As(err error, target any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "As", err, target)
	ret0, _ := ret[0].(bool)
	return ret0
}

// As indicates an expected call of As.
func (mr *MockErrorsMockRecorder) As(err, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "As", reflect.TypeOf((*MockErrors)(nil).As), err, target)
}

// Is mocks base method.
func (m *MockErrors) Is(err, target error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Is", err, target)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Is indicates an expected call of Is.
func (mr *MockErrorsMockRecorder) Is(err, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Is", reflect.TypeOf((*MockErrors)(nil).Is), err, target)
}

// New mocks base method.
func (m *MockErrors) New(text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", text)
	ret0, _ := ret[0].(error)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockErrorsMockRecorder) New(text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockErrors)(nil).New), text)
}

// Unwrap mocks base method.
func (m *MockErrors) Unwrap(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap.
func (mr *MockErrorsMockRecorder) Unwrap(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockErrors)(nil).Unwrap), err)
}
