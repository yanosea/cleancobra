// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/cobra.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/cobra.go -destination=./pkg/proxy/cobra_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	cobra "github.com/spf13/cobra"
	gomock "go.uber.org/mock/gomock"
)

// MockCobra is a mock of Cobra interface.
type MockCobra struct {
	ctrl     *gomock.Controller
	recorder *MockCobraMockRecorder
	isgomock struct{}
}

// MockCobraMockRecorder is the mock recorder for MockCobra.
type MockCobraMockRecorder struct {
	mock *MockCobra
}

// NewMockCobra creates a new mock instance.
func NewMockCobra(ctrl *gomock.Controller) *MockCobra {
	mock := &MockCobra{ctrl: ctrl}
	mock.recorder = &MockCobraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCobra) EXPECT() *MockCobraMockRecorder {
	return m.recorder
}

// ArbitraryArgs mocks base method.
func (m *MockCobra) ArbitraryArgs() cobra.PositionalArgs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArbitraryArgs")
	ret0, _ := ret[0].(cobra.PositionalArgs)
	return ret0
}

// ArbitraryArgs indicates an expected call of ArbitraryArgs.
func (mr *MockCobraMockRecorder) ArbitraryArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArbitraryArgs", reflect.TypeOf((*MockCobra)(nil).ArbitraryArgs))
}

// ExactArgs mocks base method.
func (m *MockCobra) ExactArgs(n int) cobra.PositionalArgs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExactArgs", n)
	ret0, _ := ret[0].(cobra.PositionalArgs)
	return ret0
}

// ExactArgs indicates an expected call of ExactArgs.
func (mr *MockCobraMockRecorder) ExactArgs(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExactArgs", reflect.TypeOf((*MockCobra)(nil).ExactArgs), n)
}

// NewCommand mocks base method.
func (m *MockCobra) NewCommand() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommand")
	ret0, _ := ret[0].(Command)
	return ret0
}

// NewCommand indicates an expected call of NewCommand.
func (mr *MockCobraMockRecorder) NewCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommand", reflect.TypeOf((*MockCobra)(nil).NewCommand))
}

// NoArgs mocks base method.
func (m *MockCobra) NoArgs() cobra.PositionalArgs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NoArgs")
	ret0, _ := ret[0].(cobra.PositionalArgs)
	return ret0
}

// NoArgs indicates an expected call of NoArgs.
func (mr *MockCobraMockRecorder) NoArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoArgs", reflect.TypeOf((*MockCobra)(nil).NoArgs))
}

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
	isgomock struct{}
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// AddCommand mocks base method.
func (m *MockCommand) AddCommand(cmds ...Command) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range cmds {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCommand", varargs...)
}

// AddCommand indicates an expected call of AddCommand.
func (mr *MockCommandMockRecorder) AddCommand(cmds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommand", reflect.TypeOf((*MockCommand)(nil).AddCommand), cmds...)
}

// Execute mocks base method.
func (m *MockCommand) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommand)(nil).Execute))
}

// Flags mocks base method.
func (m *MockCommand) Flags() FlagSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flags")
	ret0, _ := ret[0].(FlagSet)
	return ret0
}

// Flags indicates an expected call of Flags.
func (mr *MockCommandMockRecorder) Flags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flags", reflect.TypeOf((*MockCommand)(nil).Flags))
}

// GenBashCompletion mocks base method.
func (m *MockCommand) GenBashCompletion(w any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenBashCompletion", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenBashCompletion indicates an expected call of GenBashCompletion.
func (mr *MockCommandMockRecorder) GenBashCompletion(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenBashCompletion", reflect.TypeOf((*MockCommand)(nil).GenBashCompletion), w)
}

// GenFishCompletion mocks base method.
func (m *MockCommand) GenFishCompletion(w any, includeDesc bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenFishCompletion", w, includeDesc)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenFishCompletion indicates an expected call of GenFishCompletion.
func (mr *MockCommandMockRecorder) GenFishCompletion(w, includeDesc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenFishCompletion", reflect.TypeOf((*MockCommand)(nil).GenFishCompletion), w, includeDesc)
}

// GenPowerShellCompletion mocks base method.
func (m *MockCommand) GenPowerShellCompletion(w any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenPowerShellCompletion", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenPowerShellCompletion indicates an expected call of GenPowerShellCompletion.
func (mr *MockCommandMockRecorder) GenPowerShellCompletion(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenPowerShellCompletion", reflect.TypeOf((*MockCommand)(nil).GenPowerShellCompletion), w)
}

// GenZshCompletion mocks base method.
func (m *MockCommand) GenZshCompletion(w any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenZshCompletion", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenZshCompletion indicates an expected call of GenZshCompletion.
func (mr *MockCommandMockRecorder) GenZshCompletion(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenZshCompletion", reflect.TypeOf((*MockCommand)(nil).GenZshCompletion), w)
}

// PersistentFlags mocks base method.
func (m *MockCommand) PersistentFlags() FlagSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentFlags")
	ret0, _ := ret[0].(FlagSet)
	return ret0
}

// PersistentFlags indicates an expected call of PersistentFlags.
func (mr *MockCommandMockRecorder) PersistentFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentFlags", reflect.TypeOf((*MockCommand)(nil).PersistentFlags))
}

// RunE mocks base method.
func (m *MockCommand) RunE(cmd *cobra.Command, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunE", cmd, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunE indicates an expected call of RunE.
func (mr *MockCommandMockRecorder) RunE(cmd, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunE", reflect.TypeOf((*MockCommand)(nil).RunE), cmd, args)
}

// SetArgs mocks base method.
func (m *MockCommand) SetArgs(args cobra.PositionalArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetArgs", args)
}

// SetArgs indicates an expected call of SetArgs.
func (mr *MockCommandMockRecorder) SetArgs(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArgs", reflect.TypeOf((*MockCommand)(nil).SetArgs), args)
}

// SetLong mocks base method.
func (m *MockCommand) SetLong(long string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLong", long)
}

// SetLong indicates an expected call of SetLong.
func (mr *MockCommandMockRecorder) SetLong(long any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLong", reflect.TypeOf((*MockCommand)(nil).SetLong), long)
}

// SetRunE mocks base method.
func (m *MockCommand) SetRunE(runE func(*cobra.Command, []string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRunE", runE)
}

// SetRunE indicates an expected call of SetRunE.
func (mr *MockCommandMockRecorder) SetRunE(runE any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunE", reflect.TypeOf((*MockCommand)(nil).SetRunE), runE)
}

// SetShort mocks base method.
func (m *MockCommand) SetShort(short string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShort", short)
}

// SetShort indicates an expected call of SetShort.
func (mr *MockCommandMockRecorder) SetShort(short any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShort", reflect.TypeOf((*MockCommand)(nil).SetShort), short)
}

// SetSilenceErrors mocks base method.
func (m *MockCommand) SetSilenceErrors(silenceErrors bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSilenceErrors", silenceErrors)
}

// SetSilenceErrors indicates an expected call of SetSilenceErrors.
func (mr *MockCommandMockRecorder) SetSilenceErrors(silenceErrors any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSilenceErrors", reflect.TypeOf((*MockCommand)(nil).SetSilenceErrors), silenceErrors)
}

// SetSilenceUsage mocks base method.
func (m *MockCommand) SetSilenceUsage(silenceUsage bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSilenceUsage", silenceUsage)
}

// SetSilenceUsage indicates an expected call of SetSilenceUsage.
func (mr *MockCommandMockRecorder) SetSilenceUsage(silenceUsage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSilenceUsage", reflect.TypeOf((*MockCommand)(nil).SetSilenceUsage), silenceUsage)
}

// SetUse mocks base method.
func (m *MockCommand) SetUse(use string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUse", use)
}

// SetUse indicates an expected call of SetUse.
func (mr *MockCommandMockRecorder) SetUse(use any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUse", reflect.TypeOf((*MockCommand)(nil).SetUse), use)
}

// MockFlagSet is a mock of FlagSet interface.
type MockFlagSet struct {
	ctrl     *gomock.Controller
	recorder *MockFlagSetMockRecorder
	isgomock struct{}
}

// MockFlagSetMockRecorder is the mock recorder for MockFlagSet.
type MockFlagSetMockRecorder struct {
	mock *MockFlagSet
}

// NewMockFlagSet creates a new mock instance.
func NewMockFlagSet(ctrl *gomock.Controller) *MockFlagSet {
	mock := &MockFlagSet{ctrl: ctrl}
	mock.recorder = &MockFlagSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagSet) EXPECT() *MockFlagSetMockRecorder {
	return m.recorder
}

// Bool mocks base method.
func (m *MockFlagSet) Bool(name string, value bool, usage string) *bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool", name, value, usage)
	ret0, _ := ret[0].(*bool)
	return ret0
}

// Bool indicates an expected call of Bool.
func (mr *MockFlagSetMockRecorder) Bool(name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockFlagSet)(nil).Bool), name, value, usage)
}

// BoolP mocks base method.
func (m *MockFlagSet) BoolP(name, shorthand string, value bool, usage string) *bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BoolP", name, shorthand, value, usage)
	ret0, _ := ret[0].(*bool)
	return ret0
}

// BoolP indicates an expected call of BoolP.
func (mr *MockFlagSetMockRecorder) BoolP(name, shorthand, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BoolP", reflect.TypeOf((*MockFlagSet)(nil).BoolP), name, shorthand, value, usage)
}

// Int mocks base method.
func (m *MockFlagSet) Int(name string, value int, usage string) *int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", name, value, usage)
	ret0, _ := ret[0].(*int)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockFlagSetMockRecorder) Int(name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockFlagSet)(nil).Int), name, value, usage)
}

// IntP mocks base method.
func (m *MockFlagSet) IntP(name, shorthand string, value int, usage string) *int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntP", name, shorthand, value, usage)
	ret0, _ := ret[0].(*int)
	return ret0
}

// IntP indicates an expected call of IntP.
func (mr *MockFlagSetMockRecorder) IntP(name, shorthand, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntP", reflect.TypeOf((*MockFlagSet)(nil).IntP), name, shorthand, value, usage)
}

// String mocks base method.
func (m *MockFlagSet) String(name, value, usage string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", name, value, usage)
	ret0, _ := ret[0].(*string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockFlagSetMockRecorder) String(name, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFlagSet)(nil).String), name, value, usage)
}

// StringP mocks base method.
func (m *MockFlagSet) StringP(name, shorthand, value, usage string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringP", name, shorthand, value, usage)
	ret0, _ := ret[0].(*string)
	return ret0
}

// StringP indicates an expected call of StringP.
func (mr *MockFlagSetMockRecorder) StringP(name, shorthand, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringP", reflect.TypeOf((*MockFlagSet)(nil).StringP), name, shorthand, value, usage)
}
