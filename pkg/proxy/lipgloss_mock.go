// Code generated by MockGen. DO NOT EDIT.
// Source: lipgloss.go
//
// Generated by this command:
//
//	mockgen -source=lipgloss.go -destination=lipgloss_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	lipgloss "github.com/charmbracelet/lipgloss"
	gomock "go.uber.org/mock/gomock"
)

// MockLipgloss is a mock of Lipgloss interface.
type MockLipgloss struct {
	ctrl     *gomock.Controller
	recorder *MockLipglossMockRecorder
	isgomock struct{}
}

// MockLipglossMockRecorder is the mock recorder for MockLipgloss.
type MockLipglossMockRecorder struct {
	mock *MockLipgloss
}

// NewMockLipgloss creates a new mock instance.
func NewMockLipgloss(ctrl *gomock.Controller) *MockLipgloss {
	mock := &MockLipgloss{ctrl: ctrl}
	mock.recorder = &MockLipglossMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLipgloss) EXPECT() *MockLipglossMockRecorder {
	return m.recorder
}

// Bottom mocks base method.
func (m *MockLipgloss) Bottom() lipgloss.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bottom")
	ret0, _ := ret[0].(lipgloss.Position)
	return ret0
}

// Bottom indicates an expected call of Bottom.
func (mr *MockLipglossMockRecorder) Bottom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bottom", reflect.TypeOf((*MockLipgloss)(nil).Bottom))
}

// Center mocks base method.
func (m *MockLipgloss) Center() lipgloss.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Center")
	ret0, _ := ret[0].(lipgloss.Position)
	return ret0
}

// Center indicates an expected call of Center.
func (mr *MockLipglossMockRecorder) Center() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Center", reflect.TypeOf((*MockLipgloss)(nil).Center))
}

// Height mocks base method.
func (m *MockLipgloss) Height(str string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height", str)
	ret0, _ := ret[0].(int)
	return ret0
}

// Height indicates an expected call of Height.
func (mr *MockLipglossMockRecorder) Height(str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockLipgloss)(nil).Height), str)
}

// JoinHorizontal mocks base method.
func (m *MockLipgloss) JoinHorizontal(pos lipgloss.Position, strs ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{pos}
	for _, a := range strs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinHorizontal", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// JoinHorizontal indicates an expected call of JoinHorizontal.
func (mr *MockLipglossMockRecorder) JoinHorizontal(pos any, strs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pos}, strs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinHorizontal", reflect.TypeOf((*MockLipgloss)(nil).JoinHorizontal), varargs...)
}

// JoinVertical mocks base method.
func (m *MockLipgloss) JoinVertical(pos lipgloss.Position, strs ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{pos}
	for _, a := range strs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JoinVertical", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// JoinVertical indicates an expected call of JoinVertical.
func (mr *MockLipglossMockRecorder) JoinVertical(pos any, strs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pos}, strs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinVertical", reflect.TypeOf((*MockLipgloss)(nil).JoinVertical), varargs...)
}

// Left mocks base method.
func (m *MockLipgloss) Left() lipgloss.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Left")
	ret0, _ := ret[0].(lipgloss.Position)
	return ret0
}

// Left indicates an expected call of Left.
func (mr *MockLipglossMockRecorder) Left() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Left", reflect.TypeOf((*MockLipgloss)(nil).Left))
}

// NewStyle mocks base method.
func (m *MockLipgloss) NewStyle() Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStyle")
	ret0, _ := ret[0].(Style)
	return ret0
}

// NewStyle indicates an expected call of NewStyle.
func (mr *MockLipglossMockRecorder) NewStyle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStyle", reflect.TypeOf((*MockLipgloss)(nil).NewStyle))
}

// Right mocks base method.
func (m *MockLipgloss) Right() lipgloss.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Right")
	ret0, _ := ret[0].(lipgloss.Position)
	return ret0
}

// Right indicates an expected call of Right.
func (mr *MockLipglossMockRecorder) Right() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Right", reflect.TypeOf((*MockLipgloss)(nil).Right))
}

// Top mocks base method.
func (m *MockLipgloss) Top() lipgloss.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Top")
	ret0, _ := ret[0].(lipgloss.Position)
	return ret0
}

// Top indicates an expected call of Top.
func (mr *MockLipglossMockRecorder) Top() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Top", reflect.TypeOf((*MockLipgloss)(nil).Top))
}

// Width mocks base method.
func (m *MockLipgloss) Width(str string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Width", str)
	ret0, _ := ret[0].(int)
	return ret0
}

// Width indicates an expected call of Width.
func (mr *MockLipglossMockRecorder) Width(str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockLipgloss)(nil).Width), str)
}

// MockStyle is a mock of Style interface.
type MockStyle struct {
	ctrl     *gomock.Controller
	recorder *MockStyleMockRecorder
	isgomock struct{}
}

// MockStyleMockRecorder is the mock recorder for MockStyle.
type MockStyleMockRecorder struct {
	mock *MockStyle
}

// NewMockStyle creates a new mock instance.
func NewMockStyle(ctrl *gomock.Controller) *MockStyle {
	mock := &MockStyle{ctrl: ctrl}
	mock.recorder = &MockStyleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStyle) EXPECT() *MockStyleMockRecorder {
	return m.recorder
}

// Align mocks base method.
func (m *MockStyle) Align(p lipgloss.Position) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Align", p)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Align indicates an expected call of Align.
func (mr *MockStyleMockRecorder) Align(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Align", reflect.TypeOf((*MockStyle)(nil).Align), p)
}

// AlignHorizontal mocks base method.
func (m *MockStyle) AlignHorizontal(p lipgloss.Position) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlignHorizontal", p)
	ret0, _ := ret[0].(Style)
	return ret0
}

// AlignHorizontal indicates an expected call of AlignHorizontal.
func (mr *MockStyleMockRecorder) AlignHorizontal(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlignHorizontal", reflect.TypeOf((*MockStyle)(nil).AlignHorizontal), p)
}

// AlignVertical mocks base method.
func (m *MockStyle) AlignVertical(p lipgloss.Position) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlignVertical", p)
	ret0, _ := ret[0].(Style)
	return ret0
}

// AlignVertical indicates an expected call of AlignVertical.
func (mr *MockStyleMockRecorder) AlignVertical(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlignVertical", reflect.TypeOf((*MockStyle)(nil).AlignVertical), p)
}

// Background mocks base method.
func (m *MockStyle) Background(c lipgloss.TerminalColor) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Background", c)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Background indicates an expected call of Background.
func (mr *MockStyleMockRecorder) Background(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Background", reflect.TypeOf((*MockStyle)(nil).Background), c)
}

// Bold mocks base method.
func (m *MockStyle) Bold(v bool) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bold", v)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Bold indicates an expected call of Bold.
func (mr *MockStyleMockRecorder) Bold(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bold", reflect.TypeOf((*MockStyle)(nil).Bold), v)
}

// Border mocks base method.
func (m *MockStyle) Border(border lipgloss.Border, sides ...bool) Style {
	m.ctrl.T.Helper()
	varargs := []any{border}
	for _, a := range sides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Border", varargs...)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Border indicates an expected call of Border.
func (mr *MockStyleMockRecorder) Border(border any, sides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{border}, sides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Border", reflect.TypeOf((*MockStyle)(nil).Border), varargs...)
}

// BorderBottom mocks base method.
func (m *MockStyle) BorderBottom(v bool) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorderBottom", v)
	ret0, _ := ret[0].(Style)
	return ret0
}

// BorderBottom indicates an expected call of BorderBottom.
func (mr *MockStyleMockRecorder) BorderBottom(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorderBottom", reflect.TypeOf((*MockStyle)(nil).BorderBottom), v)
}

// BorderLeft mocks base method.
func (m *MockStyle) BorderLeft(v bool) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorderLeft", v)
	ret0, _ := ret[0].(Style)
	return ret0
}

// BorderLeft indicates an expected call of BorderLeft.
func (mr *MockStyleMockRecorder) BorderLeft(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorderLeft", reflect.TypeOf((*MockStyle)(nil).BorderLeft), v)
}

// BorderRight mocks base method.
func (m *MockStyle) BorderRight(v bool) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorderRight", v)
	ret0, _ := ret[0].(Style)
	return ret0
}

// BorderRight indicates an expected call of BorderRight.
func (mr *MockStyleMockRecorder) BorderRight(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorderRight", reflect.TypeOf((*MockStyle)(nil).BorderRight), v)
}

// BorderStyle mocks base method.
func (m *MockStyle) BorderStyle(border lipgloss.Border) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorderStyle", border)
	ret0, _ := ret[0].(Style)
	return ret0
}

// BorderStyle indicates an expected call of BorderStyle.
func (mr *MockStyleMockRecorder) BorderStyle(border any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorderStyle", reflect.TypeOf((*MockStyle)(nil).BorderStyle), border)
}

// BorderTop mocks base method.
func (m *MockStyle) BorderTop(v bool) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorderTop", v)
	ret0, _ := ret[0].(Style)
	return ret0
}

// BorderTop indicates an expected call of BorderTop.
func (mr *MockStyleMockRecorder) BorderTop(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorderTop", reflect.TypeOf((*MockStyle)(nil).BorderTop), v)
}

// Foreground mocks base method.
func (m *MockStyle) Foreground(c lipgloss.TerminalColor) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foreground", c)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Foreground indicates an expected call of Foreground.
func (mr *MockStyleMockRecorder) Foreground(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foreground", reflect.TypeOf((*MockStyle)(nil).Foreground), c)
}

// Height mocks base method.
func (m *MockStyle) Height(i int) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height", i)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Height indicates an expected call of Height.
func (mr *MockStyleMockRecorder) Height(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockStyle)(nil).Height), i)
}

// Italic mocks base method.
func (m *MockStyle) Italic(v bool) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Italic", v)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Italic indicates an expected call of Italic.
func (mr *MockStyleMockRecorder) Italic(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Italic", reflect.TypeOf((*MockStyle)(nil).Italic), v)
}

// Margin mocks base method.
func (m *MockStyle) Margin(i ...int) Style {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Margin", varargs...)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Margin indicates an expected call of Margin.
func (mr *MockStyleMockRecorder) Margin(i ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Margin", reflect.TypeOf((*MockStyle)(nil).Margin), i...)
}

// Padding mocks base method.
func (m *MockStyle) Padding(i ...int) Style {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Padding", varargs...)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Padding indicates an expected call of Padding.
func (mr *MockStyleMockRecorder) Padding(i ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Padding", reflect.TypeOf((*MockStyle)(nil).Padding), i...)
}

// Render mocks base method.
func (m *MockStyle) Render(strs ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range strs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Render", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockStyleMockRecorder) Render(strs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockStyle)(nil).Render), strs...)
}

// Strikethrough mocks base method.
func (m *MockStyle) Strikethrough(v bool) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Strikethrough", v)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Strikethrough indicates an expected call of Strikethrough.
func (mr *MockStyleMockRecorder) Strikethrough(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Strikethrough", reflect.TypeOf((*MockStyle)(nil).Strikethrough), v)
}

// Underline mocks base method.
func (m *MockStyle) Underline(v bool) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Underline", v)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Underline indicates an expected call of Underline.
func (mr *MockStyleMockRecorder) Underline(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Underline", reflect.TypeOf((*MockStyle)(nil).Underline), v)
}

// Width mocks base method.
func (m *MockStyle) Width(i int) Style {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Width", i)
	ret0, _ := ret[0].(Style)
	return ret0
}

// Width indicates an expected call of Width.
func (mr *MockStyleMockRecorder) Width(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Width", reflect.TypeOf((*MockStyle)(nil).Width), i)
}
