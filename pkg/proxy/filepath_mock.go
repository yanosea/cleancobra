// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/filepath.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/filepath.go -destination=./pkg/proxy/filepath_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilepath is a mock of Filepath interface.
type MockFilepath struct {
	ctrl     *gomock.Controller
	recorder *MockFilepathMockRecorder
	isgomock struct{}
}

// MockFilepathMockRecorder is the mock recorder for MockFilepath.
type MockFilepathMockRecorder struct {
	mock *MockFilepath
}

// NewMockFilepath creates a new mock instance.
func NewMockFilepath(ctrl *gomock.Controller) *MockFilepath {
	mock := &MockFilepath{ctrl: ctrl}
	mock.recorder = &MockFilepathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilepath) EXPECT() *MockFilepathMockRecorder {
	return m.recorder
}

// Abs mocks base method.
func (m *MockFilepath) Abs(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abs", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Abs indicates an expected call of Abs.
func (mr *MockFilepathMockRecorder) Abs(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abs", reflect.TypeOf((*MockFilepath)(nil).Abs), path)
}

// Base mocks base method.
func (m *MockFilepath) Base(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockFilepathMockRecorder) Base(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockFilepath)(nil).Base), path)
}

// Clean mocks base method.
func (m *MockFilepath) Clean(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockFilepathMockRecorder) Clean(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockFilepath)(nil).Clean), path)
}

// Dir mocks base method.
func (m *MockFilepath) Dir(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockFilepathMockRecorder) Dir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockFilepath)(nil).Dir), path)
}

// Join mocks base method.
func (m *MockFilepath) Join(elem ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range elem {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockFilepathMockRecorder) Join(elem ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockFilepath)(nil).Join), elem...)
}
