// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/strconv.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/strconv.go -destination=./pkg/proxy/strconv_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStrconv is a mock of Strconv interface.
type MockStrconv struct {
	ctrl     *gomock.Controller
	recorder *MockStrconvMockRecorder
	isgomock struct{}
}

// MockStrconvMockRecorder is the mock recorder for MockStrconv.
type MockStrconvMockRecorder struct {
	mock *MockStrconv
}

// NewMockStrconv creates a new mock instance.
func NewMockStrconv(ctrl *gomock.Controller) *MockStrconv {
	mock := &MockStrconv{ctrl: ctrl}
	mock.recorder = &MockStrconvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStrconv) EXPECT() *MockStrconvMockRecorder {
	return m.recorder
}

// Atoi mocks base method.
func (m *MockStrconv) Atoi(s string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Atoi", s)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Atoi indicates an expected call of Atoi.
func (mr *MockStrconvMockRecorder) Atoi(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Atoi", reflect.TypeOf((*MockStrconv)(nil).Atoi), s)
}

// FormatBool mocks base method.
func (m *MockStrconv) FormatBool(b bool) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatBool", b)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatBool indicates an expected call of FormatBool.
func (mr *MockStrconvMockRecorder) FormatBool(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatBool", reflect.TypeOf((*MockStrconv)(nil).FormatBool), b)
}

// FormatFloat mocks base method.
func (m *MockStrconv) FormatFloat(f float64, fmt byte, prec, bitSize int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatFloat", f, fmt, prec, bitSize)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatFloat indicates an expected call of FormatFloat.
func (mr *MockStrconvMockRecorder) FormatFloat(f, fmt, prec, bitSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatFloat", reflect.TypeOf((*MockStrconv)(nil).FormatFloat), f, fmt, prec, bitSize)
}

// FormatInt mocks base method.
func (m *MockStrconv) FormatInt(i int64, base int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatInt", i, base)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatInt indicates an expected call of FormatInt.
func (mr *MockStrconvMockRecorder) FormatInt(i, base any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatInt", reflect.TypeOf((*MockStrconv)(nil).FormatInt), i, base)
}

// Itoa mocks base method.
func (m *MockStrconv) Itoa(i int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Itoa", i)
	ret0, _ := ret[0].(string)
	return ret0
}

// Itoa indicates an expected call of Itoa.
func (mr *MockStrconvMockRecorder) Itoa(i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Itoa", reflect.TypeOf((*MockStrconv)(nil).Itoa), i)
}

// ParseBool mocks base method.
func (m *MockStrconv) ParseBool(str string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBool", str)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseBool indicates an expected call of ParseBool.
func (mr *MockStrconvMockRecorder) ParseBool(str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBool", reflect.TypeOf((*MockStrconv)(nil).ParseBool), str)
}

// ParseFloat mocks base method.
func (m *MockStrconv) ParseFloat(s string, bitSize int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseFloat", s, bitSize)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseFloat indicates an expected call of ParseFloat.
func (mr *MockStrconvMockRecorder) ParseFloat(s, bitSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFloat", reflect.TypeOf((*MockStrconv)(nil).ParseFloat), s, bitSize)
}

// ParseInt mocks base method.
func (m *MockStrconv) ParseInt(s string, base, bitSize int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseInt", s, base, bitSize)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseInt indicates an expected call of ParseInt.
func (mr *MockStrconvMockRecorder) ParseInt(s, base, bitSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseInt", reflect.TypeOf((*MockStrconv)(nil).ParseInt), s, base, bitSize)
}
