// Code generated by MockGen. DO NOT EDIT.
// Source: color.go
//
// Generated by this command:
//
//	mockgen -source=color.go -destination=color_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	color "github.com/fatih/color"
	gomock "go.uber.org/mock/gomock"
)

// MockColor is a mock of Color interface.
type MockColor struct {
	ctrl     *gomock.Controller
	recorder *MockColorMockRecorder
	isgomock struct{}
}

// MockColorMockRecorder is the mock recorder for MockColor.
type MockColorMockRecorder struct {
	mock *MockColor
}

// NewMockColor creates a new mock instance.
func NewMockColor(ctrl *gomock.Controller) *MockColor {
	mock := &MockColor{ctrl: ctrl}
	mock.recorder = &MockColorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColor) EXPECT() *MockColorMockRecorder {
	return m.recorder
}

// Black mocks base method.
func (m *MockColor) Black(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Black", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Black indicates an expected call of Black.
func (mr *MockColorMockRecorder) Black(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Black", reflect.TypeOf((*MockColor)(nil).Black), varargs...)
}

// Blue mocks base method.
func (m *MockColor) Blue(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Blue", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Blue indicates an expected call of Blue.
func (mr *MockColorMockRecorder) Blue(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blue", reflect.TypeOf((*MockColor)(nil).Blue), varargs...)
}

// Cyan mocks base method.
func (m *MockColor) Cyan(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Cyan", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Cyan indicates an expected call of Cyan.
func (mr *MockColorMockRecorder) Cyan(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cyan", reflect.TypeOf((*MockColor)(nil).Cyan), varargs...)
}

// Green mocks base method.
func (m *MockColor) Green(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Green", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Green indicates an expected call of Green.
func (mr *MockColorMockRecorder) Green(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Green", reflect.TypeOf((*MockColor)(nil).Green), varargs...)
}

// Magenta mocks base method.
func (m *MockColor) Magenta(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Magenta", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Magenta indicates an expected call of Magenta.
func (mr *MockColorMockRecorder) Magenta(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Magenta", reflect.TypeOf((*MockColor)(nil).Magenta), varargs...)
}

// New mocks base method.
func (m *MockColor) New(value ...color.Attribute) ColorFunc {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range value {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(ColorFunc)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockColorMockRecorder) New(value ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockColor)(nil).New), value...)
}

// Red mocks base method.
func (m *MockColor) Red(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Red", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Red indicates an expected call of Red.
func (mr *MockColorMockRecorder) Red(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Red", reflect.TypeOf((*MockColor)(nil).Red), varargs...)
}

// White mocks base method.
func (m *MockColor) White(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "White", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// White indicates an expected call of White.
func (mr *MockColorMockRecorder) White(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "White", reflect.TypeOf((*MockColor)(nil).White), varargs...)
}

// Yellow mocks base method.
func (m *MockColor) Yellow(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Yellow", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Yellow indicates an expected call of Yellow.
func (mr *MockColorMockRecorder) Yellow(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Yellow", reflect.TypeOf((*MockColor)(nil).Yellow), varargs...)
}

// MockColorFunc is a mock of ColorFunc interface.
type MockColorFunc struct {
	ctrl     *gomock.Controller
	recorder *MockColorFuncMockRecorder
	isgomock struct{}
}

// MockColorFuncMockRecorder is the mock recorder for MockColorFunc.
type MockColorFuncMockRecorder struct {
	mock *MockColorFunc
}

// NewMockColorFunc creates a new mock instance.
func NewMockColorFunc(ctrl *gomock.Controller) *MockColorFunc {
	mock := &MockColorFunc{ctrl: ctrl}
	mock.recorder = &MockColorFuncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColorFunc) EXPECT() *MockColorFuncMockRecorder {
	return m.recorder
}

// Print mocks base method.
func (m *MockColorFunc) Print(a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Print", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Print indicates an expected call of Print.
func (mr *MockColorFuncMockRecorder) Print(a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockColorFunc)(nil).Print), a...)
}

// Printf mocks base method.
func (m *MockColorFunc) Printf(format string, a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Printf", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Printf indicates an expected call of Printf.
func (mr *MockColorFuncMockRecorder) Printf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockColorFunc)(nil).Printf), varargs...)
}

// Println mocks base method.
func (m *MockColorFunc) Println(a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Println", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Println indicates an expected call of Println.
func (mr *MockColorFuncMockRecorder) Println(a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockColorFunc)(nil).Println), a...)
}

// Sprint mocks base method.
func (m *MockColorFunc) Sprint(a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Sprint", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sprint indicates an expected call of Sprint.
func (mr *MockColorFuncMockRecorder) Sprint(a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sprint", reflect.TypeOf((*MockColorFunc)(nil).Sprint), a...)
}

// Sprintf mocks base method.
func (m *MockColorFunc) Sprintf(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Sprintf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sprintf indicates an expected call of Sprintf.
func (mr *MockColorFuncMockRecorder) Sprintf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sprintf", reflect.TypeOf((*MockColorFunc)(nil).Sprintf), varargs...)
}

// Sprintln mocks base method.
func (m *MockColorFunc) Sprintln(a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Sprintln", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sprintln indicates an expected call of Sprintln.
func (mr *MockColorFuncMockRecorder) Sprintln(a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sprintln", reflect.TypeOf((*MockColorFunc)(nil).Sprintln), a...)
}
