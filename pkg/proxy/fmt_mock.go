// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/fmt.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/fmt.go -destination=./pkg/proxy/fmt_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFmt is a mock of Fmt interface.
type MockFmt struct {
	ctrl     *gomock.Controller
	recorder *MockFmtMockRecorder
	isgomock struct{}
}

// MockFmtMockRecorder is the mock recorder for MockFmt.
type MockFmtMockRecorder struct {
	mock *MockFmt
}

// NewMockFmt creates a new mock instance.
func NewMockFmt(ctrl *gomock.Controller) *MockFmt {
	mock := &MockFmt{ctrl: ctrl}
	mock.recorder = &MockFmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFmt) EXPECT() *MockFmtMockRecorder {
	return m.recorder
}

// Errorf mocks base method.
func (m *MockFmt) Errorf(format string, a ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Errorf", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Errorf indicates an expected call of Errorf.
func (mr *MockFmtMockRecorder) Errorf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockFmt)(nil).Errorf), varargs...)
}

// Fprint mocks base method.
func (m *MockFmt) Fprint(w io.Writer, a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{w}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Fprint", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fprint indicates an expected call of Fprint.
func (mr *MockFmtMockRecorder) Fprint(w any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{w}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fprint", reflect.TypeOf((*MockFmt)(nil).Fprint), varargs...)
}

// Fprintf mocks base method.
func (m *MockFmt) Fprintf(w io.Writer, format string, a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{w, format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Fprintf", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fprintf indicates an expected call of Fprintf.
func (mr *MockFmtMockRecorder) Fprintf(w, format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{w, format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fprintf", reflect.TypeOf((*MockFmt)(nil).Fprintf), varargs...)
}

// Fprintln mocks base method.
func (m *MockFmt) Fprintln(w io.Writer, a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{w}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Fprintln", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fprintln indicates an expected call of Fprintln.
func (mr *MockFmtMockRecorder) Fprintln(w any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{w}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fprintln", reflect.TypeOf((*MockFmt)(nil).Fprintln), varargs...)
}

// Print mocks base method.
func (m *MockFmt) Print(a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Print", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Print indicates an expected call of Print.
func (mr *MockFmtMockRecorder) Print(a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockFmt)(nil).Print), a...)
}

// Printf mocks base method.
func (m *MockFmt) Printf(format string, a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Printf", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Printf indicates an expected call of Printf.
func (mr *MockFmtMockRecorder) Printf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockFmt)(nil).Printf), varargs...)
}

// Println mocks base method.
func (m *MockFmt) Println(a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Println", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Println indicates an expected call of Println.
func (mr *MockFmtMockRecorder) Println(a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockFmt)(nil).Println), a...)
}

// Sprintf mocks base method.
func (m *MockFmt) Sprintf(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Sprintf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sprintf indicates an expected call of Sprintf.
func (mr *MockFmtMockRecorder) Sprintf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sprintf", reflect.TypeOf((*MockFmt)(nil).Sprintf), varargs...)
}
