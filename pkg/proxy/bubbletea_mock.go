// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/bubbletea.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/bubbletea.go -destination=./pkg/proxy/bubbletea_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	tea "github.com/charmbracelet/bubbletea"
	gomock "go.uber.org/mock/gomock"
)

// MockBubbletea is a mock of Bubbletea interface.
type MockBubbletea struct {
	ctrl     *gomock.Controller
	recorder *MockBubbleteaMockRecorder
	isgomock struct{}
}

// MockBubbleteaMockRecorder is the mock recorder for MockBubbletea.
type MockBubbleteaMockRecorder struct {
	mock *MockBubbletea
}

// NewMockBubbletea creates a new mock instance.
func NewMockBubbletea(ctrl *gomock.Controller) *MockBubbletea {
	mock := &MockBubbletea{ctrl: ctrl}
	mock.recorder = &MockBubbleteaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBubbletea) EXPECT() *MockBubbleteaMockRecorder {
	return m.recorder
}

// NewProgram mocks base method.
func (m *MockBubbletea) NewProgram(model tea.Model, opts ...tea.ProgramOption) Program {
	m.ctrl.T.Helper()
	varargs := []any{model}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewProgram", varargs...)
	ret0, _ := ret[0].(Program)
	return ret0
}

// NewProgram indicates an expected call of NewProgram.
func (mr *MockBubbleteaMockRecorder) NewProgram(model any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{model}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProgram", reflect.TypeOf((*MockBubbletea)(nil).NewProgram), varargs...)
}

// WithAltScreen mocks base method.
func (m *MockBubbletea) WithAltScreen() tea.ProgramOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAltScreen")
	ret0, _ := ret[0].(tea.ProgramOption)
	return ret0
}

// WithAltScreen indicates an expected call of WithAltScreen.
func (mr *MockBubbleteaMockRecorder) WithAltScreen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAltScreen", reflect.TypeOf((*MockBubbletea)(nil).WithAltScreen))
}

// WithMouseCellMotion mocks base method.
func (m *MockBubbletea) WithMouseCellMotion() tea.ProgramOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMouseCellMotion")
	ret0, _ := ret[0].(tea.ProgramOption)
	return ret0
}

// WithMouseCellMotion indicates an expected call of WithMouseCellMotion.
func (mr *MockBubbleteaMockRecorder) WithMouseCellMotion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMouseCellMotion", reflect.TypeOf((*MockBubbletea)(nil).WithMouseCellMotion))
}

// MockProgram is a mock of Program interface.
type MockProgram struct {
	ctrl     *gomock.Controller
	recorder *MockProgramMockRecorder
	isgomock struct{}
}

// MockProgramMockRecorder is the mock recorder for MockProgram.
type MockProgramMockRecorder struct {
	mock *MockProgram
}

// NewMockProgram creates a new mock instance.
func NewMockProgram(ctrl *gomock.Controller) *MockProgram {
	mock := &MockProgram{ctrl: ctrl}
	mock.recorder = &MockProgramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgram) EXPECT() *MockProgramMockRecorder {
	return m.recorder
}

// Quit mocks base method.
func (m *MockProgram) Quit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Quit")
}

// Quit indicates an expected call of Quit.
func (mr *MockProgramMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockProgram)(nil).Quit))
}

// Run mocks base method.
func (m *MockProgram) Run() (tea.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(tea.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockProgramMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockProgram)(nil).Run))
}

// Send mocks base method.
func (m *MockProgram) Send(msg tea.Msg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", msg)
}

// Send indicates an expected call of Send.
func (mr *MockProgramMockRecorder) Send(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProgram)(nil).Send), msg)
}

// Start mocks base method.
func (m *MockProgram) Start() (tea.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(tea.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockProgramMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProgram)(nil).Start))
}
